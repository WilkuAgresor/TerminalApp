#include <heating/ZoneSetting.hpp>
#include <QSpinBox>

RoomSetting::RoomSetting(QObject *parent, QObject *rootObject, QString roomId)
    :QObject(parent), mHeatingObject(rootObject), id(roomId)
{
    QMetaObject::invokeMethod(rootObject, "addZoneControlPanel", Qt::DirectConnection,
                              Q_ARG(QVariant, QVariant(id)),
                              Q_ARG(QVariant, QVariant(2350)),
                              Q_ARG(QVariant, QVariant(formatTemperature(23))));

    mFrontObject = mHeatingObject->findChild<QObject*>(HEATING_ZONE_ID_PREFIX + id, Qt::FindChildOption::FindChildrenRecursively);

    if(mFrontObject)
    {
        qDebug() << "front object found";
    }

    auto buttonObject = mFrontObject->findChild<QObject*>(HEATING_ZONE_MULTI_SET_BUTTON_ID, Qt::FindChildOption::FindChildrenRecursively);
    if(buttonObject)
    {
        qDebug() << "found button object";
        QObject::connect(buttonObject, SIGNAL(clicked()), this, SLOT(handleSelectedForMultiUpdate()));
    }

    auto setterObject = mFrontObject->findChild<QObject*>(HEATING_ZONE_SETTER_ID, Qt::FindChildOption::FindChildrenRecursively);
    if(setterObject)
    {
        qDebug() << "found setter object";


            auto spinBox = static_cast<QSpinBox*>(setterObject);
            if(spinBox)
            {
                qDebug() << "casted spinBox object";
                QObject::connect(spinBox, QOverload<int>::of(&QSpinBox::valueChanged), this, &RoomSetting::handleSetValueChanged); /*SIGNAL(valueChanged(int)), this, SLOT(handleSetValueChanged(int)));*/
            }


            CO TU SIE WYRABIA



    }

}

QString RoomSetting::formatTemperature(double temp)
{
    QString text = QString().setNum(temp, 'f', 2);
    text.append('\xB0');
    text.append(" C");
    return text;
}

void RoomSetting::setCurrentTemperature(double temp)
{
    formatTemperature(temp);
  //  curTempObject->setProperty("text", text);

}

void RoomSetting::setSetterTemperature(quint16 setTemp)
{
//    setterObject->setProperty("value", setTemp);
}

quint16 RoomSetting::getSetterTemperature()
{
//    return setterObject->property("value").toUInt();
    return 1;
}

bool RoomSetting::isSelectedForMultiUpdate()
{
    return mIsSelectedForMultiUpdate;
}

void RoomSetting::handleSelectedForMultiUpdate()
{
    qDebug() << "Selected for multi update: "<<id;
    mIsSelectedForMultiUpdate = !mIsSelectedForMultiUpdate;
}

void RoomSetting::handleSetValueChanged(int newValue)
{
    qDebug() << "set value changed to" << newValue;
}

